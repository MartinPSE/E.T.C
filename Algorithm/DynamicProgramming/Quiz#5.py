# <문제> 병사 배치하기
# N 명의 병사가 무작위로 나열되어 있다. 각 병사는 특정한 값의 전투력을 보유하고 있다.
# 병사를 배치할 때는 '전투력이 높은 병사가 앞쪽에 오도록 내림차순 으로 배치'를 하고자 한다.
# 다시 말해 앞쪽에 있는 병사에 전투력이 항상 뒤쪽에 있는 병사보다 높아야 한다.
# 또 한 배치 과정에서는 특정한 위치에 있는 병사를 열외시키는 방법을 이용한다.
# 그러면서도 남아 있는 병사의 수가 최대가 되도록 하고 싶다.

"""
idea 1. 앞쪽에 있는 병사가 항상 전투력이 높아야 한다.
idea 2. "가장 긴 증가하는 부분 수열(Longest Increasing Subsequence, LIS)로 알려진 전형적인 다이나믹프로그래밍문제
ex) array = [4, 2, 5, 8, 4, 11, 15]

D[i] = array[i] 를 마지막 원소를 가지는 부분 수열의 최대 길이.
* 모든 0 <= j < i 에 대하여, D[i] = max ( D[i] , D[j] + 1 ) if array [j] < array[i]

--> 가장 긴 증가 하는 부분은 [4,5,8,11,15]
--> 가장 긴 감소하는 부분 수열을 찾는 문제로 치환 가능.
---> 배열을 오름차 순으로 바꿔줘야한다.
"""

# n 을 입력 받자
n = int(input())

# power 입력 받고
power = list (map ( int, input() .split()))
power.reverse()

# dp 설정 하자 ---> LIS 임을 눈치 채야해
dp = [1] * n

# 프로그래밍 시작 --> 가장 긴 증가하는 부분 수열(LIS) 알고리즘 수행
for i in range(1,n):  # 1 : n
    for j in range(0,i):
        if power[j] < power[i]:
            dp[i] = max(dp[i], dp[j] + 1 )

# 열외해야 하는 병사의 최소 수를 출력
print(n - max(dp))


