# <문제> 효율적인 화폐 구성 : 문제 설명
# N 가지 종류의 화폐가 있다. 이 화폐들의 갯수를 최소한으로 이용해서 그 가치의 합이 M원이 되도록 한다.
# 이때 각 종류의 화폐는 몇 개라도 사용 할 수 있다.
# 예를 들어 2원, 3원 단위 화폐가 있을 때는 15원을 만들기 위해 3원 5개를 사용하는 것이 가장 최소한의 화폐 개수
# M원을 만들기 위한 최소한의 화폐개수를 출력하는 프로그램을 작성하세요.

"""
idea 1. 점화식을 생각
idea 2. 각각의 인덱스를 만들 수 있는 경우의 수로 보고 ---> 로직을 설정
idea 3. 최대한으로 만들 수 있는 경우 의 수 는 10001이다.
M 이 <= 10000 이기 때문에, 1원을 10000개 사용

ai = 금액 i 를 만들 수 있는 최소한의 화폐 개수
k = 각 화폐의 단위
점화식 : 각 화폐 단위인 k를 하나씩 확인하며
 * a(i-k)를 만드는 방법이 존재하는 경우, a(i) = min(ai,a(i-k) + 1)
 * a(i-k)를 만드는 방법이 존재하지 않는 경우, a(i) = INF
"""

# Dynamic Programming 이란걸 유추가능해

N, M = map(int, input().split())

# 돈을 만들어야지
money = []
for i in range(N):
    money.append(int(input()))

# DT 만들기
d = [10001] * (M + 1)
d[0] = 0

# 경우의수를 만들어보자
for i in range(N):
    for j in range(money[i], M + 1):
        if d[j - money[i]] != 10001:
            d[j] = min(d[j], d[j - money[i]] + 1)

if d[M] == 10001:
    print(-1)
else:
    print(d[M])
